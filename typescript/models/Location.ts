/* tslint:disable */
/* eslint-disable */
/**
 * Matrix Routing
 * With the Matrix Routing service you can compute distances and travel times between a set of origins and destinations.
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RoadAccess,
    RoadAccessFromJSON,
    RoadAccessFromJSONTyped,
    RoadAccessToJSON,
} from './';

/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * The latitude value in degrees (WGS84/EPSG:4326) from south to north.
     * @type {number}
     * @memberof Location
     */
    latitude: number;
    /**
     * The longitude value in degrees (WGS84/EPSG:4326) from west to east.
     * @type {number}
     * @memberof Location
     */
    longitude: number;
    /**
     * 
     * @type {RoadAccess}
     * @memberof Location
     */
    roadAccess?: RoadAccess;
    /**
     * Include the air-line connection between given and matched coordinates in the relation distance and travel time. Will be ignored when **roadAccess** is specified. We will refer to this type of location as an _off-road location_.
     * @type {boolean}
     * @memberof Location
     */
    includeLastMeters?: boolean;
    /**
     * Specifies that this waypoint will be reached at the side of street on which it is located. This is useful to prevent the driver from crossing the street to actually reach the location.
     * @type {boolean}
     * @memberof Location
     */
    matchSideOfStreet?: boolean;
}

export function LocationFromJSON(json: any): Location {
    return LocationFromJSONTyped(json, false);
}

export function LocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Location {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'latitude': json['latitude'],
        'longitude': json['longitude'],
        'roadAccess': !exists(json, 'roadAccess') ? undefined : RoadAccessFromJSON(json['roadAccess']),
        'includeLastMeters': !exists(json, 'includeLastMeters') ? undefined : json['includeLastMeters'],
        'matchSideOfStreet': !exists(json, 'matchSideOfStreet') ? undefined : json['matchSideOfStreet'],
    };
}

export function LocationToJSON(value?: Location | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'latitude': value.latitude,
        'longitude': value.longitude,
        'roadAccess': RoadAccessToJSON(value.roadAccess),
        'includeLastMeters': value.includeLastMeters,
        'matchSideOfStreet': value.matchSideOfStreet,
    };
}


