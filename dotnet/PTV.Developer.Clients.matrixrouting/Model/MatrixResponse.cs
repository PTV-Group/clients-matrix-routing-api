/*
 * Matrix Routing API
 *
 * With the Matrix Routing service you can compute distances and travel times between a set of origins and destinations.
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.matrixrouting.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.matrixrouting.Model
{
    /// <summary>
    /// MatrixResponse
    /// </summary>
    [DataContract(Name = "MatrixResponse")]
    public partial class MatrixResponse : IEquatable<MatrixResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatrixResponse" /> class.
        /// </summary>
        /// <param name="percentageOfDirectDistanceRelations">Percentage of relations in the distance matrix which has not been calculated successfully.  .</param>
        /// <param name="distances">The distances of the requested matrix elements [m]. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations..</param>
        /// <param name="travelTimes">The travel times of the requested matrix elements [s]. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations..</param>
        /// <param name="tollCosts">The toll costs of the requested matrix elements in the requested currency. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.   Toll prices do not include VAT. .</param>
        public MatrixResponse(double percentageOfDirectDistanceRelations = default(double), List<int> distances = default(List<int>), List<int> travelTimes = default(List<int>), List<double> tollCosts = default(List<double>))
        {
            this.PercentageOfDirectDistanceRelations = percentageOfDirectDistanceRelations;
            this.Distances = distances;
            this.TravelTimes = travelTimes;
            this.TollCosts = tollCosts;
        }

        /// <summary>
        /// Percentage of relations in the distance matrix which has not been calculated successfully.  
        /// </summary>
        /// <value>Percentage of relations in the distance matrix which has not been calculated successfully.  </value>
        [DataMember(Name = "percentageOfDirectDistanceRelations", EmitDefaultValue = false)]
        public double PercentageOfDirectDistanceRelations { get; set; }

        /// <summary>
        /// The distances of the requested matrix elements [m]. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.
        /// </summary>
        /// <value>The distances of the requested matrix elements [m]. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.</value>
        [DataMember(Name = "distances", EmitDefaultValue = false)]
        public List<int> Distances { get; set; }

        /// <summary>
        /// The travel times of the requested matrix elements [s]. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.
        /// </summary>
        /// <value>The travel times of the requested matrix elements [s]. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.</value>
        [DataMember(Name = "travelTimes", EmitDefaultValue = false)]
        public List<int> TravelTimes { get; set; }

        /// <summary>
        /// The toll costs of the requested matrix elements in the requested currency. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.   Toll prices do not include VAT. 
        /// </summary>
        /// <value>The toll costs of the requested matrix elements in the requested currency. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.   Toll prices do not include VAT. </value>
        [DataMember(Name = "tollCosts", EmitDefaultValue = false)]
        public List<double> TollCosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatrixResponse {\n");
            sb.Append("  PercentageOfDirectDistanceRelations: ").Append(PercentageOfDirectDistanceRelations).Append("\n");
            sb.Append("  Distances: ").Append(Distances).Append("\n");
            sb.Append("  TravelTimes: ").Append(TravelTimes).Append("\n");
            sb.Append("  TollCosts: ").Append(TollCosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatrixResponse);
        }

        /// <summary>
        /// Returns true if MatrixResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MatrixResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatrixResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PercentageOfDirectDistanceRelations == input.PercentageOfDirectDistanceRelations ||
                    this.PercentageOfDirectDistanceRelations.Equals(input.PercentageOfDirectDistanceRelations)
                ) && 
                (
                    this.Distances == input.Distances ||
                    this.Distances != null &&
                    input.Distances != null &&
                    this.Distances.SequenceEqual(input.Distances)
                ) && 
                (
                    this.TravelTimes == input.TravelTimes ||
                    this.TravelTimes != null &&
                    input.TravelTimes != null &&
                    this.TravelTimes.SequenceEqual(input.TravelTimes)
                ) && 
                (
                    this.TollCosts == input.TollCosts ||
                    this.TollCosts != null &&
                    input.TollCosts != null &&
                    this.TollCosts.SequenceEqual(input.TollCosts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PercentageOfDirectDistanceRelations.GetHashCode();
                if (this.Distances != null)
                    hashCode = hashCode * 59 + this.Distances.GetHashCode();
                if (this.TravelTimes != null)
                    hashCode = hashCode * 59 + this.TravelTimes.GetHashCode();
                if (this.TollCosts != null)
                    hashCode = hashCode * 59 + this.TollCosts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PercentageOfDirectDistanceRelations (double) maximum
            if(this.PercentageOfDirectDistanceRelations > (double)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentageOfDirectDistanceRelations, must be a value less than or equal to 100.", new [] { "PercentageOfDirectDistanceRelations" });
            }

            // PercentageOfDirectDistanceRelations (double) minimum
            if(this.PercentageOfDirectDistanceRelations < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentageOfDirectDistanceRelations, must be a value greater than or equal to 0.", new [] { "PercentageOfDirectDistanceRelations" });
            }

            yield break;
        }
    }

}
