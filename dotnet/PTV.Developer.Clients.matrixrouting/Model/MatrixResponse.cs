/*
 * Matrix Routing
 *
 * With the Matrix Routing service you can compute distances and travel times between a set of origins and destinations.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.matrixrouting.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.matrixrouting.Model
{
    /// <summary>
    /// MatrixResponse
    /// </summary>
    [DataContract(Name = "MatrixResponse")]
    public partial class MatrixResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatrixResponse" /> class.
        /// </summary>
        /// <param name="percentageOfDirectDistanceRelations">Percentage of relations in the distance matrix which has not been calculated successfully.  Zero distances corresponding to A-A relations are not included in this calculation..</param>
        /// <param name="distances">The distances of the requested matrix elements [m]. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the distance for an A-A relation is always set to zero..</param>
        /// <param name="distancesEncoded">The distances of the requested matrix elements [m]. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the distance for an A-A relation is always set to zero..</param>
        /// <param name="travelTimes">The travel times of the requested matrix elements [s]. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero..</param>
        /// <param name="travelTimesEncoded">The travel times of the requested matrix elements [s]. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero..</param>
        /// <param name="travelTimeProfilesEncoded">The travel time profiles of the requested matrix elements. Each profile is expressed using a encoded format which is explained [here](./concepts/results-representation).  Please note that the travel time for an A-A relation is always set to zero..</param>
        /// <param name="tollCosts">The toll costs of the requested matrix elements in the requested currency. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.   Toll prices do not include VAT. .</param>
        /// <param name="tollCostsEncoded">The toll costs of the requested matrix elements in the requested currency. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero..</param>
        /// <param name="directDistanceFlags">The directDistance flags of the requested matrix elements. To access to the directDistance flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the directDistance flag for an A-A relation is always set to false..</param>
        /// <param name="directDistanceFlagsEncoded">The directDistance flags of the requested matrix elements. The directDistance flags are returned as contiguous arrays of bytes. See [here](./concepts/results-representation) for more information. To access to the directDistance flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; (i * N + j) / 8&#x60;, with N being the number of destinations. And then, read the l-th bit defined by &#x60;l &#x3D; (i * N + j) % 8&#x60;. Please note that the directDistance flag for an A-A relation is always set to false..</param>
        /// <param name="violationFlags">The violation flags of the requested matrix elements. To access to the violation flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the violation flag for an A-A relation is always set to false..</param>
        /// <param name="violationFlagsEncoded">The violation flags of the requested matrix elements. The violated flags are returned as contiguous arrays of bytes. See [here](./concepts/results-representation) for more information. To access to the violation flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; (i * N + j) / 8&#x60;, with N being the number of destinations. And then, read the l-th bit defined by &#x60;l &#x3D; (i * N + j) % 8&#x60;. Please note that the violation flag for an A-A relation is always set to false..</param>
        /// <param name="warnings">A list of warnings concerning the validity of the result..</param>
        public MatrixResponse(double? percentageOfDirectDistanceRelations = default(double?), List<int?> distances = default(List<int?>), byte[] distancesEncoded = default(byte[]), List<int?> travelTimes = default(List<int?>), byte[] travelTimesEncoded = default(byte[]), byte[] travelTimeProfilesEncoded = default(byte[]), List<double?> tollCosts = default(List<double?>), byte[] tollCostsEncoded = default(byte[]), List<bool?> directDistanceFlags = default(List<bool?>), byte[] directDistanceFlagsEncoded = default(byte[]), List<bool?> violationFlags = default(List<bool?>), byte[] violationFlagsEncoded = default(byte[]), List<Warning> warnings = default(List<Warning>))
        {
            this.PercentageOfDirectDistanceRelations = percentageOfDirectDistanceRelations;
            this.Distances = distances;
            this.DistancesEncoded = distancesEncoded;
            this.TravelTimes = travelTimes;
            this.TravelTimesEncoded = travelTimesEncoded;
            this.TravelTimeProfilesEncoded = travelTimeProfilesEncoded;
            this.TollCosts = tollCosts;
            this.TollCostsEncoded = tollCostsEncoded;
            this.DirectDistanceFlags = directDistanceFlags;
            this.DirectDistanceFlagsEncoded = directDistanceFlagsEncoded;
            this.ViolationFlags = violationFlags;
            this.ViolationFlagsEncoded = violationFlagsEncoded;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Percentage of relations in the distance matrix which has not been calculated successfully.  Zero distances corresponding to A-A relations are not included in this calculation.
        /// </summary>
        /// <value>Percentage of relations in the distance matrix which has not been calculated successfully.  Zero distances corresponding to A-A relations are not included in this calculation.</value>
        [DataMember(Name = "percentageOfDirectDistanceRelations", EmitDefaultValue = true)]
        public double? PercentageOfDirectDistanceRelations { get; set; }

        /// <summary>
        /// The distances of the requested matrix elements [m]. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the distance for an A-A relation is always set to zero.
        /// </summary>
        /// <value>The distances of the requested matrix elements [m]. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the distance for an A-A relation is always set to zero.</value>
        [DataMember(Name = "distances", EmitDefaultValue = false)]
        public List<int?> Distances { get; set; }

        /// <summary>
        /// The distances of the requested matrix elements [m]. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the distance for an A-A relation is always set to zero.
        /// </summary>
        /// <value>The distances of the requested matrix elements [m]. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the distance for an A-A relation is always set to zero.</value>
        [DataMember(Name = "distancesEncoded", EmitDefaultValue = true)]
        public byte[] DistancesEncoded { get; set; }

        /// <summary>
        /// The travel times of the requested matrix elements [s]. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero.
        /// </summary>
        /// <value>The travel times of the requested matrix elements [s]. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero.</value>
        [DataMember(Name = "travelTimes", EmitDefaultValue = false)]
        public List<int?> TravelTimes { get; set; }

        /// <summary>
        /// The travel times of the requested matrix elements [s]. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero.
        /// </summary>
        /// <value>The travel times of the requested matrix elements [s]. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero.</value>
        [DataMember(Name = "travelTimesEncoded", EmitDefaultValue = true)]
        public byte[] TravelTimesEncoded { get; set; }

        /// <summary>
        /// The travel time profiles of the requested matrix elements. Each profile is expressed using a encoded format which is explained [here](./concepts/results-representation).  Please note that the travel time for an A-A relation is always set to zero.
        /// </summary>
        /// <value>The travel time profiles of the requested matrix elements. Each profile is expressed using a encoded format which is explained [here](./concepts/results-representation).  Please note that the travel time for an A-A relation is always set to zero.</value>
        [DataMember(Name = "travelTimeProfilesEncoded", EmitDefaultValue = true)]
        public byte[] TravelTimeProfilesEncoded { get; set; }

        /// <summary>
        /// The toll costs of the requested matrix elements in the requested currency. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.   Toll prices do not include VAT. 
        /// </summary>
        /// <value>The toll costs of the requested matrix elements in the requested currency. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.   Toll prices do not include VAT. </value>
        [DataMember(Name = "tollCosts", EmitDefaultValue = false)]
        public List<double?> TollCosts { get; set; }

        /// <summary>
        /// The toll costs of the requested matrix elements in the requested currency. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero.
        /// </summary>
        /// <value>The toll costs of the requested matrix elements in the requested currency. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero.</value>
        [DataMember(Name = "tollCostsEncoded", EmitDefaultValue = true)]
        public byte[] TollCostsEncoded { get; set; }

        /// <summary>
        /// The directDistance flags of the requested matrix elements. To access to the directDistance flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the directDistance flag for an A-A relation is always set to false.
        /// </summary>
        /// <value>The directDistance flags of the requested matrix elements. To access to the directDistance flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the directDistance flag for an A-A relation is always set to false.</value>
        [DataMember(Name = "directDistanceFlags", EmitDefaultValue = false)]
        public List<bool?> DirectDistanceFlags { get; set; }

        /// <summary>
        /// The directDistance flags of the requested matrix elements. The directDistance flags are returned as contiguous arrays of bytes. See [here](./concepts/results-representation) for more information. To access to the directDistance flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; (i * N + j) / 8&#x60;, with N being the number of destinations. And then, read the l-th bit defined by &#x60;l &#x3D; (i * N + j) % 8&#x60;. Please note that the directDistance flag for an A-A relation is always set to false.
        /// </summary>
        /// <value>The directDistance flags of the requested matrix elements. The directDistance flags are returned as contiguous arrays of bytes. See [here](./concepts/results-representation) for more information. To access to the directDistance flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; (i * N + j) / 8&#x60;, with N being the number of destinations. And then, read the l-th bit defined by &#x60;l &#x3D; (i * N + j) % 8&#x60;. Please note that the directDistance flag for an A-A relation is always set to false.</value>
        [DataMember(Name = "directDistanceFlagsEncoded", EmitDefaultValue = true)]
        public byte[] DirectDistanceFlagsEncoded { get; set; }

        /// <summary>
        /// The violation flags of the requested matrix elements. To access to the violation flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the violation flag for an A-A relation is always set to false.
        /// </summary>
        /// <value>The violation flags of the requested matrix elements. To access to the violation flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the violation flag for an A-A relation is always set to false.</value>
        [DataMember(Name = "violationFlags", EmitDefaultValue = false)]
        public List<bool?> ViolationFlags { get; set; }

        /// <summary>
        /// The violation flags of the requested matrix elements. The violated flags are returned as contiguous arrays of bytes. See [here](./concepts/results-representation) for more information. To access to the violation flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; (i * N + j) / 8&#x60;, with N being the number of destinations. And then, read the l-th bit defined by &#x60;l &#x3D; (i * N + j) % 8&#x60;. Please note that the violation flag for an A-A relation is always set to false.
        /// </summary>
        /// <value>The violation flags of the requested matrix elements. The violated flags are returned as contiguous arrays of bytes. See [here](./concepts/results-representation) for more information. To access to the violation flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; (i * N + j) / 8&#x60;, with N being the number of destinations. And then, read the l-th bit defined by &#x60;l &#x3D; (i * N + j) % 8&#x60;. Please note that the violation flag for an A-A relation is always set to false.</value>
        [DataMember(Name = "violationFlagsEncoded", EmitDefaultValue = true)]
        public byte[] ViolationFlagsEncoded { get; set; }

        /// <summary>
        /// A list of warnings concerning the validity of the result.
        /// </summary>
        /// <value>A list of warnings concerning the validity of the result.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatrixResponse {\n");
            sb.Append("  PercentageOfDirectDistanceRelations: ").Append(PercentageOfDirectDistanceRelations).Append("\n");
            sb.Append("  Distances: ").Append(Distances).Append("\n");
            sb.Append("  DistancesEncoded: ").Append(DistancesEncoded).Append("\n");
            sb.Append("  TravelTimes: ").Append(TravelTimes).Append("\n");
            sb.Append("  TravelTimesEncoded: ").Append(TravelTimesEncoded).Append("\n");
            sb.Append("  TravelTimeProfilesEncoded: ").Append(TravelTimeProfilesEncoded).Append("\n");
            sb.Append("  TollCosts: ").Append(TollCosts).Append("\n");
            sb.Append("  TollCostsEncoded: ").Append(TollCostsEncoded).Append("\n");
            sb.Append("  DirectDistanceFlags: ").Append(DirectDistanceFlags).Append("\n");
            sb.Append("  DirectDistanceFlagsEncoded: ").Append(DirectDistanceFlagsEncoded).Append("\n");
            sb.Append("  ViolationFlags: ").Append(ViolationFlags).Append("\n");
            sb.Append("  ViolationFlagsEncoded: ").Append(ViolationFlagsEncoded).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PercentageOfDirectDistanceRelations (double?) maximum
            if (this.PercentageOfDirectDistanceRelations > (double?)100)
            {
                yield return new ValidationResult("Invalid value for PercentageOfDirectDistanceRelations, must be a value less than or equal to 100.", new [] { "PercentageOfDirectDistanceRelations" });
            }

            // PercentageOfDirectDistanceRelations (double?) minimum
            if (this.PercentageOfDirectDistanceRelations < (double?)0)
            {
                yield return new ValidationResult("Invalid value for PercentageOfDirectDistanceRelations, must be a value greater than or equal to 0.", new [] { "PercentageOfDirectDistanceRelations" });
            }

            yield break;
        }
    }

}
