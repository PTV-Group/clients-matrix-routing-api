/*
 * Matrix Routing
 *
 * With the Matrix Routing service you can compute distances and travel times between a set of origins and destinations.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.matrixrouting.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.matrixrouting.Model
{
    /// <summary>
    /// RouteIdentifier
    /// </summary>
    [DataContract(Name = "RouteIdentifier")]
    public partial class RouteIdentifier : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteIdentifier" /> class.
        /// </summary>
        /// <param name="routeId">The ID of the route. (required).</param>
        public RouteIdentifier(Guid? routeId = default(Guid?))
        {
            // to ensure "routeId" is required (not null)
            if (routeId == null)
            {
                throw new ArgumentNullException("routeId is a required property for RouteIdentifier and cannot be null");
            }
            this.RouteId = routeId;
        }

        /// <summary>
        /// The ID of the route.
        /// </summary>
        /// <value>The ID of the route.</value>
        [DataMember(Name = "routeId", IsRequired = true, EmitDefaultValue = true)]
        public Guid? RouteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteIdentifier {\n");
            sb.Append("  RouteId: ").Append(RouteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
