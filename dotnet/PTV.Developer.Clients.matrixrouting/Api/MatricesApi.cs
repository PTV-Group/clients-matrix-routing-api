/*
 * Matrix Routing
 *
 * With the Matrix Routing service you can compute distances and travel times between a set of origins and destinations.
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.matrixrouting.Client;
using PTV.Developer.Clients.matrixrouting.Model;

namespace PTV.Developer.Clients.matrixrouting.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatricesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a matrix by calculating distances and travel times between given origins and destinations. \\ The &#x60;TOLL_COSTS&#x60; result option is not allowed with this operation because toll cost calculation takes much longer. If you want to get toll costs please use the startMatrixCalculation operation. For Time-dependent matrices, please use the startMatrixCalculation operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatrixResponse</returns>
        MatrixResponse CalculateMatrix(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a matrix by calculating distances and travel times between given origins and destinations. \\ The &#x60;TOLL_COSTS&#x60; result option is not allowed with this operation because toll cost calculation takes much longer. If you want to get toll costs please use the startMatrixCalculation operation. For Time-dependent matrices, please use the startMatrixCalculation operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatrixResponse</returns>
        ApiResponse<MatrixResponse> CalculateMatrixWithHttpInfo(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a matrix calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelMatrixCalculation(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a matrix calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelMatrixCalculationWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests the results of a matrix calculation operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatrixResponse</returns>
        MatrixResponse GetMatrix(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests the results of a matrix calculation operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatrixResponse</returns>
        ApiResponse<MatrixResponse> GetMatrixWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests the status of a matrix calculation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse GetStatus(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests the status of a matrix calculation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> GetStatusWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a matrix asynchronously by calculating distances, travel times and toll costs between given origins and destinations.\\ Please note that toll cost and time-dependent calculations significantly increase the operation runtime.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatrixIdentifier</returns>
        MatrixIdentifier StartMatrixCalculation(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a matrix asynchronously by calculating distances, travel times and toll costs between given origins and destinations.\\ Please note that toll cost and time-dependent calculations significantly increase the operation runtime.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatrixIdentifier</returns>
        ApiResponse<MatrixIdentifier> StartMatrixCalculationWithHttpInfo(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatricesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a matrix by calculating distances and travel times between given origins and destinations. \\ The &#x60;TOLL_COSTS&#x60; result option is not allowed with this operation because toll cost calculation takes much longer. If you want to get toll costs please use the startMatrixCalculation operation. For Time-dependent matrices, please use the startMatrixCalculation operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatrixResponse</returns>
        System.Threading.Tasks.Task<MatrixResponse> CalculateMatrixAsync(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a matrix by calculating distances and travel times between given origins and destinations. \\ The &#x60;TOLL_COSTS&#x60; result option is not allowed with this operation because toll cost calculation takes much longer. If you want to get toll costs please use the startMatrixCalculation operation. For Time-dependent matrices, please use the startMatrixCalculation operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatrixResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatrixResponse>> CalculateMatrixWithHttpInfoAsync(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a matrix calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelMatrixCalculationAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a matrix calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelMatrixCalculationWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests the results of a matrix calculation operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatrixResponse</returns>
        System.Threading.Tasks.Task<MatrixResponse> GetMatrixAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests the results of a matrix calculation operation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatrixResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatrixResponse>> GetMatrixWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests the status of a matrix calculation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> GetStatusAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests the status of a matrix calculation.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> GetStatusWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a matrix asynchronously by calculating distances, travel times and toll costs between given origins and destinations.\\ Please note that toll cost and time-dependent calculations significantly increase the operation runtime.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatrixIdentifier</returns>
        System.Threading.Tasks.Task<MatrixIdentifier> StartMatrixCalculationAsync(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a matrix asynchronously by calculating distances, travel times and toll costs between given origins and destinations.\\ Please note that toll cost and time-dependent calculations significantly increase the operation runtime.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatrixIdentifier)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatrixIdentifier>> StartMatrixCalculationWithHttpInfoAsync(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatricesApi : IMatricesApiSync, IMatricesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MatricesApi : IMatricesApi
    {
        private PTV.Developer.Clients.matrixrouting.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MatricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatricesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatricesApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.matrixrouting.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.matrixrouting.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.matrixrouting.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.matrixrouting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.matrixrouting.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.matrixrouting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatricesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MatricesApi(PTV.Developer.Clients.matrixrouting.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.matrixrouting.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.matrixrouting.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.matrixrouting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.matrixrouting.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.matrixrouting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatricesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MatricesApi(PTV.Developer.Clients.matrixrouting.Client.ISynchronousClient client, PTV.Developer.Clients.matrixrouting.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.matrixrouting.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.matrixrouting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.matrixrouting.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.matrixrouting.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.matrixrouting.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.matrixrouting.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a matrix by calculating distances and travel times between given origins and destinations. \\ The &#x60;TOLL_COSTS&#x60; result option is not allowed with this operation because toll cost calculation takes much longer. If you want to get toll costs please use the startMatrixCalculation operation. For Time-dependent matrices, please use the startMatrixCalculation operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatrixResponse</returns>
        public MatrixResponse CalculateMatrix(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0)
        {
            PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixResponse> localVarResponse = CalculateMatrixWithHttpInfo(locations, profile, results, options);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a matrix by calculating distances and travel times between given origins and destinations. \\ The &#x60;TOLL_COSTS&#x60; result option is not allowed with this operation because toll cost calculation takes much longer. If you want to get toll costs please use the startMatrixCalculation operation. For Time-dependent matrices, please use the startMatrixCalculation operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatrixResponse</returns>
        public PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixResponse> CalculateMatrixWithHttpInfo(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0)
        {
            // verify the required parameter 'locations' is set
            if (locations == null)
            {
                throw new PTV.Developer.Clients.matrixrouting.Client.ApiException(400, "Missing required parameter 'locations' when calling MatricesApi->CalculateMatrix");
            }

            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }
            if (options != null)
            {
                if (options.Currency != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[currency]", options.Currency));
                }
                if (options.StartTime != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[startTime]", options.StartTime));
                }
                if (options.TollTime != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[tollTime]", options.TollTime));
                }
                if (options.Duration != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[duration]", options.Duration));
                }
                if (options.TrafficMode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[trafficMode]", options.TrafficMode));
                }
                if (options.ResultFormat != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[resultFormat]", options.ResultFormat));
                }
            }
            localVarRequestOptions.Data = locations;

            localVarRequestOptions.Operation = "MatricesApi.CalculateMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MatrixResponse>("/matrices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculateMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a matrix by calculating distances and travel times between given origins and destinations. \\ The &#x60;TOLL_COSTS&#x60; result option is not allowed with this operation because toll cost calculation takes much longer. If you want to get toll costs please use the startMatrixCalculation operation. For Time-dependent matrices, please use the startMatrixCalculation operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatrixResponse</returns>
        public async System.Threading.Tasks.Task<MatrixResponse> CalculateMatrixAsync(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixResponse> localVarResponse = await CalculateMatrixWithHttpInfoAsync(locations, profile, results, options, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a matrix by calculating distances and travel times between given origins and destinations. \\ The &#x60;TOLL_COSTS&#x60; result option is not allowed with this operation because toll cost calculation takes much longer. If you want to get toll costs please use the startMatrixCalculation operation. For Time-dependent matrices, please use the startMatrixCalculation operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatrixResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixResponse>> CalculateMatrixWithHttpInfoAsync(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locations' is set
            if (locations == null)
            {
                throw new PTV.Developer.Clients.matrixrouting.Client.ApiException(400, "Missing required parameter 'locations' when calling MatricesApi->CalculateMatrix");
            }


            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }
            if (options != null)
            {
                if (options.Currency != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[currency]", options.Currency));
                }
                if (options.StartTime != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[startTime]", options.StartTime));
                }
                if (options.TollTime != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[tollTime]", options.TollTime));
                }
                if (options.Duration != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[duration]", options.Duration));
                }
                if (options.TrafficMode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[trafficMode]", options.TrafficMode));
                }
                if (options.ResultFormat != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[resultFormat]", options.ResultFormat));
                }
            }
            localVarRequestOptions.Data = locations;

            localVarRequestOptions.Operation = "MatricesApi.CalculateMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MatrixResponse>("/matrices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CalculateMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancels a matrix calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelMatrixCalculation(Guid id, int operationIndex = 0)
        {
            CancelMatrixCalculationWithHttpInfo(id);
        }

        /// <summary>
        ///  Cancels a matrix calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.matrixrouting.Client.ApiResponse<Object> CancelMatrixCalculationWithHttpInfo(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MatricesApi.CancelMatrixCalculation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/matrices/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelMatrixCalculation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancels a matrix calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelMatrixCalculationAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelMatrixCalculationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Cancels a matrix calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.matrixrouting.Client.ApiResponse<Object>> CancelMatrixCalculationWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MatricesApi.CancelMatrixCalculation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/matrices/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelMatrixCalculation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Requests the results of a matrix calculation operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatrixResponse</returns>
        public MatrixResponse GetMatrix(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixResponse> localVarResponse = GetMatrixWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests the results of a matrix calculation operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatrixResponse</returns>
        public PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixResponse> GetMatrixWithHttpInfo(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MatricesApi.GetMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MatrixResponse>("/matrices/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Requests the results of a matrix calculation operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatrixResponse</returns>
        public async System.Threading.Tasks.Task<MatrixResponse> GetMatrixAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixResponse> localVarResponse = await GetMatrixWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests the results of a matrix calculation operation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatrixResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixResponse>> GetMatrixWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MatricesApi.GetMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MatrixResponse>("/matrices/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Requests the status of a matrix calculation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse GetStatus(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.matrixrouting.Client.ApiResponse<StatusResponse> localVarResponse = GetStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests the status of a matrix calculation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public PTV.Developer.Clients.matrixrouting.Client.ApiResponse<StatusResponse> GetStatusWithHttpInfo(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MatricesApi.GetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StatusResponse>("/matrices/status/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Requests the status of a matrix calculation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> GetStatusAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.matrixrouting.Client.ApiResponse<StatusResponse> localVarResponse = await GetStatusWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests the status of a matrix calculation.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of a matrix calculation operation.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.matrixrouting.Client.ApiResponse<StatusResponse>> GetStatusWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MatricesApi.GetStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StatusResponse>("/matrices/status/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a matrix asynchronously by calculating distances, travel times and toll costs between given origins and destinations.\\ Please note that toll cost and time-dependent calculations significantly increase the operation runtime.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatrixIdentifier</returns>
        public MatrixIdentifier StartMatrixCalculation(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0)
        {
            PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixIdentifier> localVarResponse = StartMatrixCalculationWithHttpInfo(locations, profile, results, options);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a matrix asynchronously by calculating distances, travel times and toll costs between given origins and destinations.\\ Please note that toll cost and time-dependent calculations significantly increase the operation runtime.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatrixIdentifier</returns>
        public PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixIdentifier> StartMatrixCalculationWithHttpInfo(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0)
        {
            // verify the required parameter 'locations' is set
            if (locations == null)
            {
                throw new PTV.Developer.Clients.matrixrouting.Client.ApiException(400, "Missing required parameter 'locations' when calling MatricesApi->StartMatrixCalculation");
            }

            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }
            if (options != null)
            {
                if (options.Currency != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[currency]", options.Currency));
                }
                if (options.StartTime != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[startTime]", options.StartTime));
                }
                if (options.TollTime != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[tollTime]", options.TollTime));
                }
                if (options.Duration != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[duration]", options.Duration));
                }
                if (options.TrafficMode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[trafficMode]", options.TrafficMode));
                }
                if (options.ResultFormat != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[resultFormat]", options.ResultFormat));
                }
            }
            localVarRequestOptions.Data = locations;

            localVarRequestOptions.Operation = "MatricesApi.StartMatrixCalculation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MatrixIdentifier>("/matrices/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartMatrixCalculation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a matrix asynchronously by calculating distances, travel times and toll costs between given origins and destinations.\\ Please note that toll cost and time-dependent calculations significantly increase the operation runtime.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatrixIdentifier</returns>
        public async System.Threading.Tasks.Task<MatrixIdentifier> StartMatrixCalculationAsync(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixIdentifier> localVarResponse = await StartMatrixCalculationWithHttpInfoAsync(locations, profile, results, options, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a matrix asynchronously by calculating distances, travel times and toll costs between given origins and destinations.\\ Please note that toll cost and time-dependent calculations significantly increase the operation runtime.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.matrixrouting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locations"></param>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](./concepts/profiles-and-countries) such as EUR_TRAILER_TRUCK. (optional, default to &quot;EUR_TRAILER_TRUCK&quot;)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;DISTANCES&#x60;     Response includes information about the distances between start and destination locations.  * &#x60;TRAVEL_TIMES&#x60;     Response includes information about the travel times between start and destination locations.  * &#x60;TOLL_COSTS&#x60;     Response includes information about the toll costs between start and destination locations.     Toll tariffs are either evaluated using the date and time in &#x60;options[tollTime]&#x60; if provided or on a normal Monday noon in the time zones CET (for European profiles), CST (for USA profiles) and AEST (for Australian profiles). (optional)</param>
        /// <param name="options">Matrix Routing-relevant options like the currency for the toll costs. Use array notation like &#x60;options[currency]&#x3D;EUR&#x60; to set options. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatrixIdentifier)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.matrixrouting.Client.ApiResponse<MatrixIdentifier>> StartMatrixCalculationWithHttpInfoAsync(Locations locations, string? profile = default(string?), List<Results>? results = default(List<Results>?), Options? options = default(Options?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locations' is set
            if (locations == null)
            {
                throw new PTV.Developer.Clients.matrixrouting.Client.ApiException(400, "Missing required parameter 'locations' when calling MatricesApi->StartMatrixCalculation");
            }


            PTV.Developer.Clients.matrixrouting.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.matrixrouting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.matrixrouting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (profile != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "profile", profile));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }
            if (options != null)
            {
                if (options.Currency != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[currency]", options.Currency));
                }
                if (options.StartTime != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[startTime]", options.StartTime));
                }
                if (options.TollTime != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[tollTime]", options.TollTime));
                }
                if (options.Duration != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[duration]", options.Duration));
                }
                if (options.TrafficMode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[trafficMode]", options.TrafficMode));
                }
                if (options.ResultFormat != null)
                {
                    localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.matrixrouting.Client.ClientUtils.ParameterToMultiMap("", "options[resultFormat]", options.ResultFormat));
                }
            }
            localVarRequestOptions.Data = locations;

            localVarRequestOptions.Operation = "MatricesApi.StartMatrixCalculation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MatrixIdentifier>("/matrices/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartMatrixCalculation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
