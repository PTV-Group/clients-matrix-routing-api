/*
 * Matrix Routing
 * With the Matrix Routing service you can compute distances and travel times between a set of origins and destinations.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.matrixrouting.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.matrixrouting.model.Warning;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.matrixrouting.ApiClient;
/**
 * MatrixResponse
 */
@JsonPropertyOrder({
  MatrixResponse.JSON_PROPERTY_PERCENTAGE_OF_DIRECT_DISTANCE_RELATIONS,
  MatrixResponse.JSON_PROPERTY_DISTANCES,
  MatrixResponse.JSON_PROPERTY_DISTANCES_ENCODED,
  MatrixResponse.JSON_PROPERTY_TRAVEL_TIMES,
  MatrixResponse.JSON_PROPERTY_TRAVEL_TIMES_ENCODED,
  MatrixResponse.JSON_PROPERTY_TRAVEL_TIME_PROFILES_ENCODED,
  MatrixResponse.JSON_PROPERTY_TOLL_COSTS,
  MatrixResponse.JSON_PROPERTY_TOLL_COSTS_ENCODED,
  MatrixResponse.JSON_PROPERTY_DIRECT_DISTANCE_FLAGS,
  MatrixResponse.JSON_PROPERTY_DIRECT_DISTANCE_FLAGS_ENCODED,
  MatrixResponse.JSON_PROPERTY_VIOLATION_FLAGS,
  MatrixResponse.JSON_PROPERTY_VIOLATION_FLAGS_ENCODED,
  MatrixResponse.JSON_PROPERTY_WARNINGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T13:06:20.919447521Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class MatrixResponse {
  public static final String JSON_PROPERTY_PERCENTAGE_OF_DIRECT_DISTANCE_RELATIONS = "percentageOfDirectDistanceRelations";
  private Double percentageOfDirectDistanceRelations;

  public static final String JSON_PROPERTY_DISTANCES = "distances";
  private List<Integer> distances = new ArrayList<>();

  public static final String JSON_PROPERTY_DISTANCES_ENCODED = "distancesEncoded";
  private byte[] distancesEncoded;

  public static final String JSON_PROPERTY_TRAVEL_TIMES = "travelTimes";
  private List<Integer> travelTimes = new ArrayList<>();

  public static final String JSON_PROPERTY_TRAVEL_TIMES_ENCODED = "travelTimesEncoded";
  private byte[] travelTimesEncoded;

  public static final String JSON_PROPERTY_TRAVEL_TIME_PROFILES_ENCODED = "travelTimeProfilesEncoded";
  private byte[] travelTimeProfilesEncoded;

  public static final String JSON_PROPERTY_TOLL_COSTS = "tollCosts";
  private List<Double> tollCosts = new ArrayList<>();

  public static final String JSON_PROPERTY_TOLL_COSTS_ENCODED = "tollCostsEncoded";
  private byte[] tollCostsEncoded;

  public static final String JSON_PROPERTY_DIRECT_DISTANCE_FLAGS = "directDistanceFlags";
  private List<Boolean> directDistanceFlags = new ArrayList<>();

  public static final String JSON_PROPERTY_DIRECT_DISTANCE_FLAGS_ENCODED = "directDistanceFlagsEncoded";
  private byte[] directDistanceFlagsEncoded;

  public static final String JSON_PROPERTY_VIOLATION_FLAGS = "violationFlags";
  private List<Boolean> violationFlags = new ArrayList<>();

  public static final String JSON_PROPERTY_VIOLATION_FLAGS_ENCODED = "violationFlagsEncoded";
  private byte[] violationFlagsEncoded;

  public static final String JSON_PROPERTY_WARNINGS = "warnings";
  private List<Warning> warnings = new ArrayList<>();

  public MatrixResponse() { 
  }

  public MatrixResponse percentageOfDirectDistanceRelations(Double percentageOfDirectDistanceRelations) {
    this.percentageOfDirectDistanceRelations = percentageOfDirectDistanceRelations;
    return this;
  }

  /**
   * Percentage of relations in the distance matrix which has not been calculated successfully.  Zero distances corresponding to A-A relations are not included in this calculation.
   * minimum: 0
   * maximum: 100
   * @return percentageOfDirectDistanceRelations
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PERCENTAGE_OF_DIRECT_DISTANCE_RELATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getPercentageOfDirectDistanceRelations() {
    return percentageOfDirectDistanceRelations;
  }


  @JsonProperty(JSON_PROPERTY_PERCENTAGE_OF_DIRECT_DISTANCE_RELATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPercentageOfDirectDistanceRelations(Double percentageOfDirectDistanceRelations) {
    this.percentageOfDirectDistanceRelations = percentageOfDirectDistanceRelations;
  }


  public MatrixResponse distances(List<Integer> distances) {
    this.distances = distances;
    return this;
  }

  public MatrixResponse addDistancesItem(Integer distancesItem) {
    if (this.distances == null) {
      this.distances = new ArrayList<>();
    }
    this.distances.add(distancesItem);
    return this;
  }

  /**
   * The distances of the requested matrix elements [m]. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the distance for an A-A relation is always set to zero.
   * @return distances
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Integer> getDistances() {
    return distances;
  }


  @JsonProperty(JSON_PROPERTY_DISTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistances(List<Integer> distances) {
    this.distances = distances;
  }


  public MatrixResponse distancesEncoded(byte[] distancesEncoded) {
    this.distancesEncoded = distancesEncoded;
    return this;
  }

  /**
   * The distances of the requested matrix elements [m]. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the distance of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the distance for an A-A relation is always set to zero.
   * @return distancesEncoded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISTANCES_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getDistancesEncoded() {
    return distancesEncoded;
  }


  @JsonProperty(JSON_PROPERTY_DISTANCES_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistancesEncoded(byte[] distancesEncoded) {
    this.distancesEncoded = distancesEncoded;
  }


  public MatrixResponse travelTimes(List<Integer> travelTimes) {
    this.travelTimes = travelTimes;
    return this;
  }

  public MatrixResponse addTravelTimesItem(Integer travelTimesItem) {
    if (this.travelTimes == null) {
      this.travelTimes = new ArrayList<>();
    }
    this.travelTimes.add(travelTimesItem);
    return this;
  }

  /**
   * The travel times of the requested matrix elements [s]. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero.
   * @return travelTimes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRAVEL_TIMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Integer> getTravelTimes() {
    return travelTimes;
  }


  @JsonProperty(JSON_PROPERTY_TRAVEL_TIMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTravelTimes(List<Integer> travelTimes) {
    this.travelTimes = travelTimes;
  }


  public MatrixResponse travelTimesEncoded(byte[] travelTimesEncoded) {
    this.travelTimesEncoded = travelTimesEncoded;
    return this;
  }

  /**
   * The travel times of the requested matrix elements [s]. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the travel time of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero.
   * @return travelTimesEncoded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRAVEL_TIMES_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getTravelTimesEncoded() {
    return travelTimesEncoded;
  }


  @JsonProperty(JSON_PROPERTY_TRAVEL_TIMES_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTravelTimesEncoded(byte[] travelTimesEncoded) {
    this.travelTimesEncoded = travelTimesEncoded;
  }


  public MatrixResponse travelTimeProfilesEncoded(byte[] travelTimeProfilesEncoded) {
    this.travelTimeProfilesEncoded = travelTimeProfilesEncoded;
    return this;
  }

  /**
   * The travel time profiles of the requested matrix elements. Each profile is expressed using a encoded format which is explained [here](./concepts/results-representation).  Please note that the travel time for an A-A relation is always set to zero.
   * @return travelTimeProfilesEncoded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRAVEL_TIME_PROFILES_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getTravelTimeProfilesEncoded() {
    return travelTimeProfilesEncoded;
  }


  @JsonProperty(JSON_PROPERTY_TRAVEL_TIME_PROFILES_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTravelTimeProfilesEncoded(byte[] travelTimeProfilesEncoded) {
    this.travelTimeProfilesEncoded = travelTimeProfilesEncoded;
  }


  public MatrixResponse tollCosts(List<Double> tollCosts) {
    this.tollCosts = tollCosts;
    return this;
  }

  public MatrixResponse addTollCostsItem(Double tollCostsItem) {
    if (this.tollCosts == null) {
      this.tollCosts = new ArrayList<>();
    }
    this.tollCosts.add(tollCostsItem);
    return this;
  }

  /**
   * The toll costs of the requested matrix elements in the requested currency. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations.   Toll prices do not include VAT. 
   * @return tollCosts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOLL_COSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Double> getTollCosts() {
    return tollCosts;
  }


  @JsonProperty(JSON_PROPERTY_TOLL_COSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTollCosts(List<Double> tollCosts) {
    this.tollCosts = tollCosts;
  }


  public MatrixResponse tollCostsEncoded(byte[] tollCostsEncoded) {
    this.tollCostsEncoded = tollCostsEncoded;
    return this;
  }

  /**
   * The toll costs of the requested matrix elements in the requested currency. Each value is expressed as unsigned integer and uses a 4-bytes little endian scheme. See [here](./concepts/results-representation) for more information. To access to the toll cost of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the travel time for an A-A relation is always set to zero.
   * @return tollCostsEncoded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOLL_COSTS_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getTollCostsEncoded() {
    return tollCostsEncoded;
  }


  @JsonProperty(JSON_PROPERTY_TOLL_COSTS_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTollCostsEncoded(byte[] tollCostsEncoded) {
    this.tollCostsEncoded = tollCostsEncoded;
  }


  public MatrixResponse directDistanceFlags(List<Boolean> directDistanceFlags) {
    this.directDistanceFlags = directDistanceFlags;
    return this;
  }

  public MatrixResponse addDirectDistanceFlagsItem(Boolean directDistanceFlagsItem) {
    if (this.directDistanceFlags == null) {
      this.directDistanceFlags = new ArrayList<>();
    }
    this.directDistanceFlags.add(directDistanceFlagsItem);
    return this;
  }

  /**
   * The directDistance flags of the requested matrix elements. To access to the directDistance flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the directDistance flag for an A-A relation is always set to false.
   * @return directDistanceFlags
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECT_DISTANCE_FLAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Boolean> getDirectDistanceFlags() {
    return directDistanceFlags;
  }


  @JsonProperty(JSON_PROPERTY_DIRECT_DISTANCE_FLAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectDistanceFlags(List<Boolean> directDistanceFlags) {
    this.directDistanceFlags = directDistanceFlags;
  }


  public MatrixResponse directDistanceFlagsEncoded(byte[] directDistanceFlagsEncoded) {
    this.directDistanceFlagsEncoded = directDistanceFlagsEncoded;
    return this;
  }

  /**
   * The directDistance flags of the requested matrix elements. The directDistance flags are returned as contiguous arrays of bytes. See [here](./concepts/results-representation) for more information. To access to the directDistance flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; (i * N + j) / 8&#x60;, with N being the number of destinations. And then, read the l-th bit defined by &#x60;l &#x3D; (i * N + j) % 8&#x60;. Please note that the directDistance flag for an A-A relation is always set to false.
   * @return directDistanceFlagsEncoded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECT_DISTANCE_FLAGS_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getDirectDistanceFlagsEncoded() {
    return directDistanceFlagsEncoded;
  }


  @JsonProperty(JSON_PROPERTY_DIRECT_DISTANCE_FLAGS_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectDistanceFlagsEncoded(byte[] directDistanceFlagsEncoded) {
    this.directDistanceFlagsEncoded = directDistanceFlagsEncoded;
  }


  public MatrixResponse violationFlags(List<Boolean> violationFlags) {
    this.violationFlags = violationFlags;
    return this;
  }

  public MatrixResponse addViolationFlagsItem(Boolean violationFlagsItem) {
    if (this.violationFlags == null) {
      this.violationFlags = new ArrayList<>();
    }
    this.violationFlags.add(violationFlagsItem);
    return this;
  }

  /**
   * The violation flags of the requested matrix elements. To access to the violation flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; i * N + j&#x60;, with N being the number of destinations. Please note that the violation flag for an A-A relation is always set to false.
   * @return violationFlags
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIOLATION_FLAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Boolean> getViolationFlags() {
    return violationFlags;
  }


  @JsonProperty(JSON_PROPERTY_VIOLATION_FLAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViolationFlags(List<Boolean> violationFlags) {
    this.violationFlags = violationFlags;
  }


  public MatrixResponse violationFlagsEncoded(byte[] violationFlagsEncoded) {
    this.violationFlagsEncoded = violationFlagsEncoded;
    return this;
  }

  /**
   * The violation flags of the requested matrix elements. The violated flags are returned as contiguous arrays of bytes. See [here](./concepts/results-representation) for more information. To access to the violation flag of the relation between the origin i and the destination j, read the k-th element defined by &#x60;k &#x3D; (i * N + j) / 8&#x60;, with N being the number of destinations. And then, read the l-th bit defined by &#x60;l &#x3D; (i * N + j) % 8&#x60;. Please note that the violation flag for an A-A relation is always set to false.
   * @return violationFlagsEncoded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIOLATION_FLAGS_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getViolationFlagsEncoded() {
    return violationFlagsEncoded;
  }


  @JsonProperty(JSON_PROPERTY_VIOLATION_FLAGS_ENCODED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViolationFlagsEncoded(byte[] violationFlagsEncoded) {
    this.violationFlagsEncoded = violationFlagsEncoded;
  }


  public MatrixResponse warnings(List<Warning> warnings) {
    this.warnings = warnings;
    return this;
  }

  public MatrixResponse addWarningsItem(Warning warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * A list of warnings concerning the validity of the result.
   * @return warnings
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Warning> getWarnings() {
    return warnings;
  }


  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWarnings(List<Warning> warnings) {
    this.warnings = warnings;
  }


  /**
   * Return true if this MatrixResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatrixResponse matrixResponse = (MatrixResponse) o;
    return Objects.equals(this.percentageOfDirectDistanceRelations, matrixResponse.percentageOfDirectDistanceRelations) &&
        Objects.equals(this.distances, matrixResponse.distances) &&
        Arrays.equals(this.distancesEncoded, matrixResponse.distancesEncoded) &&
        Objects.equals(this.travelTimes, matrixResponse.travelTimes) &&
        Arrays.equals(this.travelTimesEncoded, matrixResponse.travelTimesEncoded) &&
        Arrays.equals(this.travelTimeProfilesEncoded, matrixResponse.travelTimeProfilesEncoded) &&
        Objects.equals(this.tollCosts, matrixResponse.tollCosts) &&
        Arrays.equals(this.tollCostsEncoded, matrixResponse.tollCostsEncoded) &&
        Objects.equals(this.directDistanceFlags, matrixResponse.directDistanceFlags) &&
        Arrays.equals(this.directDistanceFlagsEncoded, matrixResponse.directDistanceFlagsEncoded) &&
        Objects.equals(this.violationFlags, matrixResponse.violationFlags) &&
        Arrays.equals(this.violationFlagsEncoded, matrixResponse.violationFlagsEncoded) &&
        Objects.equals(this.warnings, matrixResponse.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentageOfDirectDistanceRelations, distances, Arrays.hashCode(distancesEncoded), travelTimes, Arrays.hashCode(travelTimesEncoded), Arrays.hashCode(travelTimeProfilesEncoded), tollCosts, Arrays.hashCode(tollCostsEncoded), directDistanceFlags, Arrays.hashCode(directDistanceFlagsEncoded), violationFlags, Arrays.hashCode(violationFlagsEncoded), warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatrixResponse {\n");
    sb.append("    percentageOfDirectDistanceRelations: ").append(toIndentedString(percentageOfDirectDistanceRelations)).append("\n");
    sb.append("    distances: ").append(toIndentedString(distances)).append("\n");
    sb.append("    distancesEncoded: ").append(toIndentedString(distancesEncoded)).append("\n");
    sb.append("    travelTimes: ").append(toIndentedString(travelTimes)).append("\n");
    sb.append("    travelTimesEncoded: ").append(toIndentedString(travelTimesEncoded)).append("\n");
    sb.append("    travelTimeProfilesEncoded: ").append(toIndentedString(travelTimeProfilesEncoded)).append("\n");
    sb.append("    tollCosts: ").append(toIndentedString(tollCosts)).append("\n");
    sb.append("    tollCostsEncoded: ").append(toIndentedString(tollCostsEncoded)).append("\n");
    sb.append("    directDistanceFlags: ").append(toIndentedString(directDistanceFlags)).append("\n");
    sb.append("    directDistanceFlagsEncoded: ").append(toIndentedString(directDistanceFlagsEncoded)).append("\n");
    sb.append("    violationFlags: ").append(toIndentedString(violationFlags)).append("\n");
    sb.append("    violationFlagsEncoded: ").append(toIndentedString(violationFlagsEncoded)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `percentageOfDirectDistanceRelations` to the URL query string
    if (getPercentageOfDirectDistanceRelations() != null) {
      joiner.add(String.format("%spercentageOfDirectDistanceRelations%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPercentageOfDirectDistanceRelations()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `distances` to the URL query string
    if (getDistances() != null) {
      for (int i = 0; i < getDistances().size(); i++) {
        joiner.add(String.format("%sdistances%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getDistances().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `distancesEncoded` to the URL query string
    if (getDistancesEncoded() != null) {
      joiner.add(String.format("%sdistancesEncoded%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDistancesEncoded()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `travelTimes` to the URL query string
    if (getTravelTimes() != null) {
      for (int i = 0; i < getTravelTimes().size(); i++) {
        joiner.add(String.format("%stravelTimes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getTravelTimes().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `travelTimesEncoded` to the URL query string
    if (getTravelTimesEncoded() != null) {
      joiner.add(String.format("%stravelTimesEncoded%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTravelTimesEncoded()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `travelTimeProfilesEncoded` to the URL query string
    if (getTravelTimeProfilesEncoded() != null) {
      joiner.add(String.format("%stravelTimeProfilesEncoded%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTravelTimeProfilesEncoded()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tollCosts` to the URL query string
    if (getTollCosts() != null) {
      for (int i = 0; i < getTollCosts().size(); i++) {
        joiner.add(String.format("%stollCosts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getTollCosts().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `tollCostsEncoded` to the URL query string
    if (getTollCostsEncoded() != null) {
      joiner.add(String.format("%stollCostsEncoded%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTollCostsEncoded()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `directDistanceFlags` to the URL query string
    if (getDirectDistanceFlags() != null) {
      for (int i = 0; i < getDirectDistanceFlags().size(); i++) {
        joiner.add(String.format("%sdirectDistanceFlags%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getDirectDistanceFlags().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `directDistanceFlagsEncoded` to the URL query string
    if (getDirectDistanceFlagsEncoded() != null) {
      joiner.add(String.format("%sdirectDistanceFlagsEncoded%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDirectDistanceFlagsEncoded()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `violationFlags` to the URL query string
    if (getViolationFlags() != null) {
      for (int i = 0; i < getViolationFlags().size(); i++) {
        joiner.add(String.format("%sviolationFlags%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getViolationFlags().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `violationFlagsEncoded` to the URL query string
    if (getViolationFlagsEncoded() != null) {
      joiner.add(String.format("%sviolationFlagsEncoded%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getViolationFlagsEncoded()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `warnings` to the URL query string
    if (getWarnings() != null) {
      for (int i = 0; i < getWarnings().size(); i++) {
        if (getWarnings().get(i) != null) {
          joiner.add(getWarnings().get(i).toUrlQueryString(String.format("%swarnings%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

